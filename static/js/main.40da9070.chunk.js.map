{"version":3,"sources":["theme.tsx","utils/DweetsContractUtils.ts","utils/Web3Utils.ts","pages/WrongNetwork.tsx","components/DweetPostCard.tsx","components/LikeButton.tsx","components/LikeChip.tsx","components/DweetCardsList.tsx","pages/DweetsFeed.tsx","components/ConnectWalletPopup.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","typography","h1","fontSize","h2","overrides","MuiCardHeader","title","MuiCardContent","root","loadDweets","dweetsContract","a","async","dweetsCount","toNumber","dweets","i","loadDweet","dweet","push","dweetId","res","id","message","author","likes","likeDweet","like","tx","wait","detectWeb3","window","ethereum","web3","getWeb3Provider","web3Provider","enable","console","error","WrongNetwork","Grid","container","justify","spacing","item","xs","md","Typography","variant","paragraph","useStyles","makeStyles","createStyles","card","width","marginTop","marginBottom","textField","DweetPostCard","props","classes","useState","setMessage","loading","setLoading","Card","className","noValidate","autoComplete","CardContent","TextField","label","multiline","rowsMax","value","onChange","e","target","margin","CardActions","Button","color","onClick","event","preventDefault","undefined","log","signer","openConnectWalletPopup","postDweet","LinearProgress","LikeButton","IconButton","aria-label","LikeChip","Chip","icon","dweetLikes","DweetCardsList","setDweets","useEffect","load","ignore","on","newDweet","idx","findIndex","newDweets","removeAllListeners","handleLikeClick","length","dweetCards","map","key","CardHeader","disableSpacing","Fragment","DweetsFeed","ConnectWalletPopup","dialogTitleText","dialogText","buttonText","Dialog","open","onClose","handleClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","handleConnect","autoFocus","appbarTitle","flexGrow","Boolean","location","hostname","match","ReactDOM","render","appBarRightElements","appContent","setWeb3Provider","ethers","getDefaultProvider","provider","setProvider","setSigner","account","setAccount","setDweetsContract","popupOpen","setPopupOpen","loadWeb3","providers","Web3Provider","getSigner","getAddress","networkId","accounts","removeListener","abi","Dweets","getNetwork","network","chainId","dweetsAddress","Contract","connect","getDweetsContractInstance","then","contract","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Container","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40da9070.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  typography: {\n    h1: {\n      fontSize: \"3rem\"\n    },\n    h2: {\n      fontSize: \"2rem\"\n    }\n  },\n  overrides: {\n    MuiCardHeader: {\n      title: {\n        fontSize: \"1rem\"\n      }\n    },\n    MuiCardContent: {\n      root: {\n        fontSize: \"1.2rem\"\n      }\n    }\n  }\n});\n\nexport default theme;\n","import Dweets from \"../contracts/Dweets.json\";\nimport { ethers } from \"ethers\";\nimport { Contract, Signer } from \"ethers/ethers\";\nimport { Provider } from \"ethers/providers\";\nimport IDweet from \"../interfaces/IDweet.js\";\n\nexport function getDweetsContractAddress(chainId: number) {\n  if (chainId === 3) {\n    //ropsten\n    return \"0xB22c4D2ddCF14f8F85fA3e8EBAd21407bc01Defa\";\n  }\n\n  if (chainId === 5777) {\n    //unknown or localhost\n    return \"0xd81F01f3b78794F3B62A74632b9B67b5af681116\";\n  }\n\n  return null;\n}\n\nexport async function getDweetsContractInstance(\n  provider: Provider,\n  signer?: Signer\n) {\n  //instantiate smart contract\n  const abi = Dweets.abi;\n  const network = await provider.getNetwork();\n  const dweetsAddress = getDweetsContractAddress(network.chainId);\n  if (dweetsAddress === null) {\n    console.log(\"Unsupported network\");\n    return null;\n  }\n\n  let dweetsContract = new ethers.Contract(dweetsAddress, abi, provider);\n  if (signer !== undefined) {\n    dweetsContract = dweetsContract.connect(signer);\n  }\n\n  return dweetsContract;\n}\n\nexport async function loadDweets(dweetsContract: Contract) {\n  let dweetsCount = await dweetsContract.dweetsCount();\n  dweetsCount = dweetsCount.toNumber();\n\n  let dweets = [];\n  for (let i: number = dweetsCount - 1; i >= 0; i--) {\n    const dweet = await loadDweet(dweetsContract, i);\n    dweets.push(dweet);\n  }\n\n  return dweets;\n}\n\nexport async function loadDweet(dweetsContract: Contract, dweetId: number) {\n  const res = await dweetsContract.dweets(dweetId);\n  const dweet: IDweet = {\n    id: res.id.toNumber(),\n    message: res.message,\n    author: res.author,\n    likes: res.likes.toNumber()\n  };\n\n  return dweet;\n}\n\nexport async function likeDweet(dweetsContract: Contract, dweetId: number) {\n  const tx = await dweetsContract.like(dweetId);\n  await tx.wait();\n}\n","declare global {\n  interface Window {\n    ethereum?: any;\n    web3?: any;\n  }\n}\n\nexport function detectWeb3() {\n  if (window.ethereum || window.web3) {\n    return true;\n  }\n  return false;\n}\n\nexport async function getWeb3Provider() {\n  if (window.ethereum) {\n    //modern dapp browsers\n    const web3Provider = window.ethereum;\n    try {\n      //Request account access\n      await window.ethereum.enable();\n      return web3Provider;\n    } catch (error) {\n      //User denied account access...\n      console.error(\"User denied account access to metamask\");\n      return null;\n    }\n  }\n\n  if (window.web3) {\n    //legacy dapp browsers\n    return window.web3;\n  }\n\n  //non-dapp browser\n  return null;\n}\n","import React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\n\nexport default function WrongNetwork() {\n  return (\n    <Grid container justify=\"center\" spacing={2}>\n      <Grid item xs={12} md={8}>\n        <Typography variant=\"h1\" paragraph={true}>\n          Wrong ethereum network\n        </Typography>\n        <Typography variant=\"h2\">\n          Please switch to Ethereum Network: Ropsten\n        </Typography>\n        <Typography variant=\"body1\" paragraph={true}>\n          Dwitter is currently only available on ropsten testnet. Please make\n          sure that your wallet is connected to the ropsten testnet and not to\n          the mainnet.\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Theme,\n  createStyles,\n  Card,\n  CardContent,\n  TextField,\n  CardActions,\n  Button,\n  LinearProgress,\n  makeStyles\n} from \"@material-ui/core\";\nimport { Contract } from \"ethers/ethers\";\n\ninterface DweetPostCardProps {\n  dweetsContract: Contract;\n  openConnectWalletPopup(): void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      width: \"100%\",\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    },\n    textField: {\n      width: \"100%\"\n    }\n  })\n);\n\nexport default function DweetPostCard(props: DweetPostCardProps) {\n  const classes = useStyles();\n  const [message, setMessage] = useState<string>();\n  const [loading, setLoading] = useState<boolean>();\n\n  const handleSubmit = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    if (message === undefined || message === \"\") {\n      console.log(\"please provide a message\");\n      return;\n    }\n\n    if (props.dweetsContract.signer === null) {\n      //open download or connect wallet popup\n      props.openConnectWalletPopup();\n      return;\n    }\n\n    //post dweet\n    setLoading(true);\n    const tx = await props.dweetsContract.postDweet(message);\n    await tx.wait();\n    setLoading(false);\n\n    //reset message\n    setMessage(\"\");\n  };\n\n  return (\n    <Card className={classes.card}>\n      <form noValidate autoComplete=\"off\">\n        <CardContent>\n          <TextField\n            id=\"outlined-multiline-flexible\"\n            label=\"What's happening?\"\n            multiline\n            rowsMax=\"4\"\n            value={message}\n            onChange={e => {\n              setMessage(e.target.value);\n            }}\n            margin=\"normal\"\n            className={classes.textField}\n          />\n        </CardContent>\n        <CardActions>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n            Dweet\n          </Button>\n        </CardActions>\n        {loading && <LinearProgress />}\n      </form>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\n\ninterface LikeButtonProps {\n  dweetId: number;\n  onClick: { (dweetId: number): any };\n}\n\nexport default function LikeButton(props: LikeButtonProps) {\n  const handleClick = (event: React.MouseEvent) => {\n    event.preventDefault();\n    props.onClick(props.dweetId);\n  };\n\n  return (\n    <IconButton aria-label=\"like\" onClick={handleClick}>\n      <FavoriteIcon />\n    </IconButton>\n  );\n}\n","import React from \"react\";\nimport { Chip } from \"@material-ui/core\";\nimport LikeButton from \"./LikeButton\";\n\ninterface LikeChipProps {\n  dweetId: number;\n  dweetLikes: number;\n  onClick: { (dweetId: number): any };\n}\nexport default function LikeChip(props: LikeChipProps) {\n  return (\n    <Chip\n      icon={<LikeButton dweetId={props.dweetId} onClick={props.onClick} />}\n      label={props.dweetLikes}\n      variant=\"outlined\"\n    />\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Contract } from \"ethers/ethers\";\nimport {\n  CardContent,\n  makeStyles,\n  Theme,\n  createStyles,\n  Card,\n  CardHeader,\n  CardActions\n} from \"@material-ui/core\";\nimport IDweet from \"../interfaces/IDweet\";\nimport { loadDweets, likeDweet, loadDweet } from \"../utils/DweetsContractUtils\";\nimport LikeChip from \"./LikeChip\";\n\ninterface DweetCardsListProps {\n  dweetsContract: Contract;\n  openConnectWalletPopup(): void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      width: \"100%\",\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    }\n  })\n);\n\nexport default function DweetCardsList(props: DweetCardsListProps) {\n  const classes = useStyles();\n  const [dweets, setDweets] = useState<Array<IDweet>>([]);\n\n  //load dweets when contract changes\n  useEffect(() => {\n    if (props.dweetsContract === undefined) {\n      return;\n    }\n\n    async function load() {\n      const dweets = await loadDweets(props.dweetsContract);\n      setDweets(dweets);\n    }\n    load();\n  }, [props.dweetsContract]);\n\n  //register blockchain event listeners\n  useEffect(() => {\n    if (props.dweetsContract === undefined) {\n      return;\n    }\n\n    let ignore = false; //handle out-of-order responses\n\n    props.dweetsContract.on(\"newDweetEvent\", async () => {\n      const dweets = await loadDweets(props.dweetsContract);\n      if (!ignore) setDweets(dweets);\n    });\n\n    props.dweetsContract.on(\"newLikeEvent\", async dweetId => {\n      const newDweet = await loadDweet(props.dweetsContract, dweetId);\n\n      //update dweets\n      if (!ignore)\n        setDweets(dweets => {\n          const idx = dweets.findIndex(dweet => dweet.id === newDweet.id);\n          const newDweets = [...dweets]; //copy dweets\n          newDweets[idx] = newDweet; //update the liked dweet\n          return newDweets;\n        });\n    });\n\n    //remove event listeners on cleanup\n    return function cleanup() {\n      props.dweetsContract.removeAllListeners(\"newDweetEvent\");\n      props.dweetsContract.removeAllListeners(\"newLikeEvent\");\n      ignore = true;\n    };\n  }, [props.dweetsContract]);\n\n  const handleLikeClick = async (dweetId: number) => {\n    if (dweets === undefined) {\n      return;\n    }\n\n    if (props.dweetsContract.signer === null) {\n      //open download or connect wallet popup\n      props.openConnectWalletPopup();\n      return;\n    }\n\n    await likeDweet(props.dweetsContract, dweetId);\n  };\n\n  if (dweets === undefined) {\n    return <div>loading dweets...</div>;\n  }\n\n  if (dweets.length === 0) {\n    return <div>there are no dweets.</div>;\n  }\n\n  //generate dweet card for each dweet\n  const dweetCards = dweets.map((item, key) => {\n    const title: string = \"From: \" + item.author;\n\n    return (\n      <Card key={key} className={classes.card}>\n        <CardHeader title={title} />\n        <CardContent>{item.message}</CardContent>\n        <CardActions disableSpacing>\n          <LikeChip\n            dweetId={item.id}\n            dweetLikes={item.likes}\n            onClick={handleLikeClick}\n          />\n        </CardActions>\n      </Card>\n    );\n  });\n\n  return <React.Fragment>{dweetCards}</React.Fragment>;\n}\n","import React from \"react\";\nimport { Contract } from \"ethers\";\nimport { Grid } from \"@material-ui/core\";\nimport DweetPostCard from \"../components/DweetPostCard\";\nimport DweetCardsList from \"../components/DweetCardsList\";\n\ninterface DweetsFeedProps {\n  dweetsContract: Contract;\n  openConnectWalletPopup(): void;\n}\n\nexport default function DweetsFeed(props: DweetsFeedProps) {\n  return (\n    <Grid container justify=\"center\" spacing={2}>\n      <Grid item xs={12} md={8}>\n        <DweetPostCard\n          dweetsContract={props.dweetsContract}\n          openConnectWalletPopup={props.openConnectWalletPopup}\n        />\n        <DweetCardsList\n          dweetsContract={props.dweetsContract}\n          openConnectWalletPopup={props.openConnectWalletPopup}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button\n} from \"@material-ui/core\";\nimport { detectWeb3 } from \"../utils/Web3Utils\";\n\ninterface ConnectWalletPopupProps {\n  open: boolean;\n  handleClose(): void;\n  handleConnect(): void;\n}\n\nexport default function ConnectWalletPopup(props: ConnectWalletPopupProps) {\n  const handleConnect = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    if (detectWeb3()) {\n      props.handleConnect();\n    } else {\n      window.open(\"https://metamask.io/\");\n    }\n\n    props.handleClose();\n  };\n\n  let dialogTitleText;\n  let dialogText;\n  let buttonText;\n\n  if (detectWeb3()) {\n    //connect dialog\n    dialogTitleText = \"Please connect your wallet.\";\n    dialogText =\n      \"Dwitter is a decentralised message board. The dApp is running on the ethereum blockchain. Please connect your ethereum wallet to interact with dwitter.\";\n    buttonText = \"Connect Wallet\";\n  } else {\n    //download metamask dialog\n    dialogTitleText = \"Please download an ethereum wallet.\";\n    dialogText =\n      \"Dwitter is a decentralised message board. The dApp is running on the ethereum blockchain. Please download an ethereum wallet like metamask to interact with dwitter.\";\n    buttonText = \"Download Metamask\";\n  }\n\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{dialogTitleText}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {dialogText}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleConnect} color=\"primary\" autoFocus>\n          {buttonText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { ethers, Contract } from \"ethers\";\nimport { Signer } from \"ethers/ethers\";\nimport {\n  AppBar,\n  Button,\n  Container,\n  Theme,\n  Typography,\n  Toolbar,\n  createStyles,\n  makeStyles,\n  ThemeProvider,\n  CssBaseline\n} from \"@material-ui/core\";\n\nimport theme from \"./theme\";\nimport { getDweetsContractInstance } from \"./utils/DweetsContractUtils\";\nimport { detectWeb3, getWeb3Provider } from \"./utils/Web3Utils\";\nimport WrongNetwork from \"./pages/WrongNetwork\";\nimport DweetsFeed from \"./pages/DweetsFeed\";\nimport ConnectWalletPopup from \"./components/ConnectWalletPopup\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appbarTitle: {\n      flexGrow: 1\n    }\n  })\n);\n\nexport default function App() {\n  const classes = useStyles();\n\n  const [web3Provider, setWeb3Provider] = useState();\n  const [provider, setProvider] = useState(\n    ethers.getDefaultProvider(\"ropsten\")\n  );\n  const [signer, setSigner] = useState<Signer>();\n  const [account, setAccount] = useState<string>();\n  const [dweetsContract, setDweetsContract] = useState<Contract>();\n\n  const [popupOpen, setPopupOpen] = useState<boolean>(false);\n\n  const loadWeb3 = async () => {\n    const web3Provider = await getWeb3Provider();\n    if (web3Provider === null) {\n      console.log(\"Unable to access web3 provider.\");\n      return;\n    }\n    setWeb3Provider(web3Provider);\n\n    //set provider and signer\n    const provider = new ethers.providers.Web3Provider(web3Provider);\n    setProvider(provider);\n    const signer = provider.getSigner();\n    setSigner(signer);\n    const account = await signer.getAddress();\n    setAccount(account);\n  };\n\n  const handleConnectMetamask = (event: React.MouseEvent) => {\n    event.preventDefault();\n    if (detectWeb3()) {\n      loadWeb3();\n      return;\n    }\n\n    //open download metamask popup\n    setPopupOpen(true);\n  };\n\n  //listen for address and network changes\n  useEffect(() => {\n    if (web3Provider === undefined) {\n      return;\n    }\n\n    web3Provider.on(\"networkChanged\", (networkId: string) => {\n      const provider = new ethers.providers.Web3Provider(web3Provider);\n      const signer = provider.getSigner();\n      setProvider(provider);\n      setSigner(signer);\n    });\n\n    web3Provider.on(\"accountsChanged\", (accounts: Array<string>) => {\n      setAccount(accounts[0]);\n      const provider = new ethers.providers.Web3Provider(web3Provider);\n      const signer = provider.getSigner();\n      setProvider(provider);\n      setSigner(signer);\n    });\n\n    return () => {\n      web3Provider.removeListener(\"networkChanged\");\n      web3Provider.removeListener(\"accountsChanged\");\n    };\n  }, [web3Provider]);\n\n  //instantiate new smart contract on provider change\n  useEffect(() => {\n    if (provider === undefined) {\n      return;\n    }\n\n    //instantiate smart contract\n    getDweetsContractInstance(provider, signer).then(contract => {\n      if (contract === null) {\n        console.log(\"Unable to instantiate dweets contract.\");\n        setDweetsContract(undefined);\n        return;\n      }\n\n      setDweetsContract(contract);\n    });\n  }, [provider, signer]);\n\n  //render elements\n  let appBarRightElements;\n  let appContent;\n\n  if (dweetsContract !== undefined) {\n    appContent = (\n      <DweetsFeed\n        dweetsContract={dweetsContract}\n        openConnectWalletPopup={() => {\n          setPopupOpen(true);\n        }}\n      />\n    );\n  } else {\n    //might be on wrong network\n    appContent = <WrongNetwork />;\n  }\n\n  if (account !== undefined) {\n    appBarRightElements = <Typography>Your address: {account}</Typography>;\n  } else {\n    appBarRightElements = (\n      <Button color=\"inherit\" onClick={handleConnectMetamask}>\n        Connect Wallet\n      </Button>\n    );\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.appbarTitle}>\n            dwitter - a decentralised message board.\n          </Typography>\n          {appBarRightElements}\n        </Toolbar>\n      </AppBar>\n      <Container>{appContent}</Container>\n      <ConnectWalletPopup\n        open={popupOpen}\n        handleClose={() => {\n          setPopupOpen(false);\n        }}\n        handleConnect={loadWeb3}\n      />\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}